/**
 * This file contains all the Data Transfer Object (DTO) and Command Model types
 * used throughout the application's API layer. These types are derived from the
 * core database schema types to ensure consistency and type safety between the
 * database and the API.
 *
 * DTOs (Data Transfer Objects) are used to shape the data sent in API responses.
 * Command Models represent the structure of data for creating or updating resources,
 * typically used in API request payloads.
 */

import type { Enums, Tables, TablesInsert, TablesUpdate } from './db/database.types';

// --- Base Type Aliases ---

/** Base row type for the 'flashcards' table. */
type FlashcardRow = Tables<'flashcards'>;

/** Base insert type for the 'flashcards' table. */
type FlashcardInsert = TablesInsert<'flashcards'>;

/** Base row type for the 'profiles' table. */
type ProfileRow = Tables<'profiles'>;

/** Base update type for the 'profiles' table. */
type ProfileUpdate = TablesUpdate<'profiles'>;

/** Enum type for language levels. */
export type LanguageLevel = Enums<'language_level'>;

// --- Flashcard DTOs and Command Models ---

/**
 * DTO for a single flashcard item in a list.
 * Represents the data structure for the `GET /api/flashcards` response.
 * It's a subset of the full FlashcardRow.
 */
export type FlashcardListItemDto = Pick<
  FlashcardRow,
  'id' | 'front' | 'back' | 'part_of_speech' | 'leitner_box' | 'review_due_at' | 'created_at'
>;

/**
 * Command Model for creating a new flashcard manually.
 * Represents the request payload for `POST /api/flashcards`.
 * Derived from FlashcardInsert, selecting only the fields required for manual creation.
 */
export type CreateFlashcardCommand = Pick<FlashcardInsert, 'front' | 'back' | 'part_of_speech'>;

/**
 * DTO for the response after creating a flashcard.
 * Represents the data structure for the `POST /api/flashcards` success response.
 */
export type CreatedFlashcardDto = Pick<
  FlashcardRow,
  'id' | 'front' | 'back' | 'part_of_speech' | 'leitner_box' | 'review_due_at' | 'created_at'
>;

/**
 * DTO for a single, detailed flashcard view.
 * Represents the data structure for the `GET /api/flashcards/{flashcardId}` response.
 */
export type FlashcardDetailDto = FlashcardRow;

/**
 * Command Model for updating an existing flashcard.
 * Represents the request payload for `PATCH /api/flashcards/{flashcardId}`.
 * All fields are optional to allow partial updates.
 */
export type UpdateFlashcardCommand = Partial<Pick<FlashcardRow, 'front' | 'back' | 'part_of_speech'>>;

// --- AI Generation DTOs and Command Models ---

/**
 * Command Model for requesting flashcard suggestions from the AI.
 * Represents the request payload for `POST /api/ai/generate-suggestions`.
 */
export type GenerateSuggestionsCommand = {
  text: string;
  level: Extract<LanguageLevel, 'b1' | 'b2' | 'c1'>;
};

/**
 * Represents a single flashcard suggestion generated by the AI.
 * Includes a temporary client-side ID for UI management before import.
 */
export type AiSuggestion = {
  id: string; // Temporary client-side UUID
  front: string;
  back: string;
};

/**
 * DTO for the response containing AI-generated flashcard suggestions.
 * Represents the data structure for the `POST /api/ai/generate-suggestions` response.
 */
export type GenerateSuggestionsResponseDto = {
  suggestions: AiSuggestion[];
};

/**
 * Command Model for importing approved AI-generated flashcards into the database.
 * Represents the request payload for `POST /api/ai/import-flashcards`.
 */
export type ImportFlashcardsCommand = {
  flashcards: Array<Pick<FlashcardInsert, 'front' | 'back' | 'part_of_speech'>>;
  metrics: {
    generatedCount: number;
    importedCount: number;
  };
};

/**
 * DTO for the response after importing flashcards.
 * Represents the data structure for the `POST /api/ai/import-flashcards` success response.
 */
export type ImportFlashcardsResponseDto = {
  message: string;
  importedCount: number;
};

// --- Review Session DTOs and Command Models ---

/**
 * DTO for a single card presented during a review session.
 * Represents an item in the `cards` array from the `GET /api/review/session` response.
 */
export type ReviewCardDto = Pick<FlashcardRow, 'id' | 'front' | 'back' | 'part_of_speech'>;

/**
 * DTO for the entire set of cards in a review session.
 * Represents the data structure for the `GET /api/review/session` response.
 */
export type ReviewSessionDto = {
  cards: ReviewCardDto[];
};

/**
 * DTO for updating a card's review status.
 * Represents the request payload for `POST /api/review/update`.
 */
export type UpdateCardReviewDto = {
  flashcardId: string;
  knewIt: boolean;
};

/**
 * Command Model for updating a card's review status.
 * Represents the request payload for `POST /api/review/update`.
 * @deprecated Use UpdateCardReviewDto instead
 */
export type UpdateReviewStatusCommand = UpdateCardReviewDto;

// --- User Profile DTOs and Command Models ---

/**
 * DTO for pagination details included in list responses.
 */
export type PaginationDto = {
  currentPage: number;
  pageSize: number;
  totalItems: number;
  totalPages: number;
};

/**
 * DTO for the response of the paginated list of flashcards.
 * Represents the data structure for the `GET /api/flashcards` response.
 */
export type ListFlashcardsResponseDto = {
  data: FlashcardListItemDto[];
  pagination: PaginationDto;
};

/**
 * DTO for the user's profile.
 * Represents the data structure for the `GET /api/profile` response.
 */
export type UserProfileDto = ProfileRow;

/**
 * DTO for updating the user's profile.
 * Represents the request payload for `PATCH /api/profile`.
 * Currently only allows updating the default AI level.
 */
export type UpdateProfileDto = {
  default_ai_level: LanguageLevel;
};

/**
 * Command Model for updating the user's profile.
 * Contains validated data and user ID to be passed to the service layer.
 */
export type UpdateProfileCommand = {
  userId: string;
  default_ai_level: LanguageLevel;
};
